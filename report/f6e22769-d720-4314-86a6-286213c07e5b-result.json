{"name": "test_2", "status": "broken", "statusDetails": {"message": "urllib.error.URLError: <urlopen error [WinError 10061] 由于目标计算机积极拒绝，无法连接。>", "trace": "self = <urllib.request.HTTPHandler object at 0x03EFD030>, http_class = <class 'http.client.HTTPConnection'>\nreq = <selenium.webdriver.remote.remote_connection.Request object at 0x03EFDFF0>, http_conn_args = {}\nhost = '127.0.0.1:4723', h = <http.client.HTTPConnection object at 0x03EFD1D0>\n\n    def do_open(self, http_class, req, **http_conn_args):\n        \"\"\"Return an HTTPResponse object for the request, using http_class.\n    \n        http_class must implement the HTTPConnection API from http.client.\n        \"\"\"\n        host = req.host\n        if not host:\n            raise URLError('no host given')\n    \n        # will parse host:port\n        h = http_class(host, timeout=req.timeout, **http_conn_args)\n        h.set_debuglevel(self._debuglevel)\n    \n        headers = dict(req.unredirected_hdrs)\n        headers.update(dict((k, v) for k, v in req.headers.items()\n                            if k not in headers))\n    \n        # TODO(jhylton): Should this be redesigned to handle\n        # persistent connections?\n    \n        # We want to make an HTTP/1.1 request, but the addinfourl\n        # class isn't prepared to deal with a persistent connection.\n        # It will try to read all remaining data from the socket,\n        # which will block while the server waits for the next request.\n        # So make sure the connection gets closed after the (only)\n        # request.\n        headers[\"Connection\"] = \"close\"\n        headers = dict((name.title(), val) for name, val in headers.items())\n    \n        if req._tunnel_host:\n            tunnel_headers = {}\n            proxy_auth_hdr = \"Proxy-Authorization\"\n            if proxy_auth_hdr in headers:\n                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]\n                # Proxy-Authorization should not be sent to origin\n                # server.\n                del headers[proxy_auth_hdr]\n            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)\n    \n        try:\n            try:\n                h.request(req.get_method(), req.selector, req.data, headers,\n>                         encode_chunked=req.has_header('Transfer-encoding'))\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\urllib\\request.py:1318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPConnection object at 0x03EFD1D0>, method = 'POST', url = '/wd/hub/session'\nbody = b'{\"desiredCapabilities\": {\"platformName\": \"Android\", \"platformVersion\": \"5.0\", \"deviceName\": \"192.168.163.103:5555\", \"appPackage\": \"com.android.settings\", \"appActivity\": \".Settings\", \"unicodeKeyboard\": true, \"resetKeyboard\": true}}'\nheaders = {'Accept': 'application/json', 'Connection': 'close', 'Content-Length': '230', 'Content-Type': 'application/json;charset=UTF-8', ...}\n\n    def request(self, method, url, body=None, headers={}, *,\n                encode_chunked=False):\n        \"\"\"Send a complete request to the server.\"\"\"\n>       self._send_request(method, url, body, headers, encode_chunked)\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\http\\client.py:1239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPConnection object at 0x03EFD1D0>, method = 'POST', url = '/wd/hub/session'\nbody = b'{\"desiredCapabilities\": {\"platformName\": \"Android\", \"platformVersion\": \"5.0\", \"deviceName\": \"192.168.163.103:5555\", \"appPackage\": \"com.android.settings\", \"appActivity\": \".Settings\", \"unicodeKeyboard\": true, \"resetKeyboard\": true}}'\nheaders = {'Accept': 'application/json', 'Connection': 'close', 'Content-Length': '230', 'Content-Type': 'application/json;charset=UTF-8', ...}\nencode_chunked = False\n\n    def _send_request(self, method, url, body, headers, encode_chunked):\n        # Honor explicitly requested Host: and Accept-Encoding: headers.\n        header_names = frozenset(k.lower() for k in headers)\n        skips = {}\n        if 'host' in header_names:\n            skips['skip_host'] = 1\n        if 'accept-encoding' in header_names:\n            skips['skip_accept_encoding'] = 1\n    \n        self.putrequest(method, url, **skips)\n    \n        # chunked encoding will happen if HTTP/1.1 is used and either\n        # the caller passes encode_chunked=True or the following\n        # conditions hold:\n        # 1. content-length has not been explicitly set\n        # 2. the body is a file or iterable, but not a str or bytes-like\n        # 3. Transfer-Encoding has NOT been explicitly set by the caller\n    \n        if 'content-length' not in header_names:\n            # only chunk body if not explicitly set for backwards\n            # compatibility, assuming the client code is already handling the\n            # chunking\n            if 'transfer-encoding' not in header_names:\n                # if content-length cannot be automatically determined, fall\n                # back to chunked encoding\n                encode_chunked = False\n                content_length = self._get_content_length(body, method)\n                if content_length is None:\n                    if body is not None:\n                        if self.debuglevel > 0:\n                            print('Unable to determine size of %r' % body)\n                        encode_chunked = True\n                        self.putheader('Transfer-Encoding', 'chunked')\n                else:\n                    self.putheader('Content-Length', str(content_length))\n        else:\n            encode_chunked = False\n    \n        for hdr, value in headers.items():\n            self.putheader(hdr, value)\n        if isinstance(body, str):\n            # RFC 2616 Section 3.7.1 says that text default has a\n            # default charset of iso-8859-1.\n            body = _encode(body, 'body')\n>       self.endheaders(body, encode_chunked=encode_chunked)\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\http\\client.py:1285: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPConnection object at 0x03EFD1D0>\nmessage_body = b'{\"desiredCapabilities\": {\"platformName\": \"Android\", \"platformVersion\": \"5.0\", \"deviceName\": \"192.168.163.103:5555\", \"appPackage\": \"com.android.settings\", \"appActivity\": \".Settings\", \"unicodeKeyboard\": true, \"resetKeyboard\": true}}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\http\\client.py:1234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPConnection object at 0x03EFD1D0>\nmessage_body = b'{\"desiredCapabilities\": {\"platformName\": \"Android\", \"platformVersion\": \"5.0\", \"deviceName\": \"192.168.163.103:5555\", \"appPackage\": \"com.android.settings\", \"appActivity\": \".Settings\", \"unicodeKeyboard\": true, \"resetKeyboard\": true}}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\http\\client.py:1026: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPConnection object at 0x03EFD1D0>\ndata = b'POST /wd/hub/session HTTP/1.1\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 230\\r\\nHost: 127.0.0.1:4723\\r\\nUser-Ag...on-urllib/3.6\\r\\nAccept: application/json\\r\\nContent-Type: application/json;charset=UTF-8\\r\\nConnection: close\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\http\\client.py:964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPConnection object at 0x03EFD1D0>\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n        self.sock = self._create_connection(\n>           (self.host,self.port), self.timeout, self.source_address)\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\http\\client.py:936: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('127.0.0.1', 4723), timeout = <object object at 0x02989A50>, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\socket.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('127.0.0.1', 4723), timeout = <object object at 0x02989A50>, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\socket.py:713: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Test.test_search.Test_Base object at 0x03EFDDB0>\n\n    def setup(self):\n>       self.driver = init_driver()\n\nTest\\test_search.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nBasic\\Init_Driver.py:20: in init_driver\n    driver = webdriver.Remote(\"http://127.0.0.1:4723/wd/hub\",desired_caps)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\appium_python_client-0.25-py3.6.egg\\appium\\webdriver\\webdriver.py:36: in __init__\n    super(WebDriver, self).__init__(command_executor, desired_capabilities, browser_profile, proxy, keep_alive)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:91: in __init__\n    self.start_session(desired_capabilities, browser_profile)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:173: in start_session\n    'desiredCapabilities': desired_capabilities,\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:231: in execute\n    response = self.command_executor.execute(driver_command, params)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:395: in execute\n    return self._request(command_info[0], url, body=data)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:463: in _request\n    resp = opener.open(request, timeout=self._timeout)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\urllib\\request.py:526: in open\n    response = self._open(req, data)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\urllib\\request.py:544: in _open\n    '_open', req)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\urllib\\request.py:504: in _call_chain\n    result = func(*args)\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\urllib\\request.py:1346: in http_open\n    return self.do_open(http.client.HTTPConnection, req)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib.request.HTTPHandler object at 0x03EFD030>, http_class = <class 'http.client.HTTPConnection'>\nreq = <selenium.webdriver.remote.remote_connection.Request object at 0x03EFDFF0>, http_conn_args = {}\nhost = '127.0.0.1:4723', h = <http.client.HTTPConnection object at 0x03EFD1D0>\n\n    def do_open(self, http_class, req, **http_conn_args):\n        \"\"\"Return an HTTPResponse object for the request, using http_class.\n    \n        http_class must implement the HTTPConnection API from http.client.\n        \"\"\"\n        host = req.host\n        if not host:\n            raise URLError('no host given')\n    \n        # will parse host:port\n        h = http_class(host, timeout=req.timeout, **http_conn_args)\n        h.set_debuglevel(self._debuglevel)\n    \n        headers = dict(req.unredirected_hdrs)\n        headers.update(dict((k, v) for k, v in req.headers.items()\n                            if k not in headers))\n    \n        # TODO(jhylton): Should this be redesigned to handle\n        # persistent connections?\n    \n        # We want to make an HTTP/1.1 request, but the addinfourl\n        # class isn't prepared to deal with a persistent connection.\n        # It will try to read all remaining data from the socket,\n        # which will block while the server waits for the next request.\n        # So make sure the connection gets closed after the (only)\n        # request.\n        headers[\"Connection\"] = \"close\"\n        headers = dict((name.title(), val) for name, val in headers.items())\n    \n        if req._tunnel_host:\n            tunnel_headers = {}\n            proxy_auth_hdr = \"Proxy-Authorization\"\n            if proxy_auth_hdr in headers:\n                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]\n                # Proxy-Authorization should not be sent to origin\n                # server.\n                del headers[proxy_auth_hdr]\n            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)\n    \n        try:\n            try:\n                h.request(req.get_method(), req.selector, req.data, headers,\n                          encode_chunked=req.has_header('Transfer-encoding'))\n            except OSError as err: # timeout error\n>               raise URLError(err)\nE               urllib.error.URLError: <urlopen error [WinError 10061] 由于目标计算机积极拒绝，无法连接。>\n\nc:\\users\\admin900625\\appdata\\local\\programs\\python\\python36-32\\lib\\urllib\\request.py:1320: URLError"}, "start": 1583423790857, "stop": 1583423790857, "uuid": "0e0ce0ed-79b2-4912-a7ba-3a911a75c3b4", "historyId": "3076e89e749c67a48d0075dc4be40f5f", "testCaseId": "4e7f7ebb445738c733a14e0a6f9e3079", "fullName": "Test.test_search.Test_Base#test_2", "labels": [{"name": "parentSuite", "value": "Test"}, {"name": "suite", "value": "test_search"}, {"name": "subSuite", "value": "Test_Base"}, {"name": "host", "value": "DESKTOP-E3BR8K0"}, {"name": "thread", "value": "4636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test.test_search"}]}